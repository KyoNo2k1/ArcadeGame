{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport axios from 'axios';\n\nconst useForm = (FormType, formRef, setShowForm, validator, user, setUser, setDialogState) => {\n  _s();\n\n  const default_values = useCallback(() => {\n    if (FormType === \"Login\") {\n      return {\n        Email: \"\",\n        Password: \"\"\n      };\n    }\n\n    if (FormType === \"SignUp\") {\n      return {\n        Full_name: \"\",\n        Email: \"\",\n        Password: \"\",\n        Confirm_password: \"\",\n        Gender: 1\n      };\n    }\n\n    if (FormType === \"ForgotPassword\") {\n      return {\n        Email: \"\"\n      };\n    }\n\n    if (FormType === \"ChangePassword\") {\n      return {\n        Old_password: \"\",\n        New_password: \"\",\n        Confirm_password: \"\"\n      };\n    }\n  }, [FormType]);\n  const [values, setValues] = useState(default_values);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  const [errors, setErrors] = useState({});\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setErrors({});\n    setErrors(validator(FormType, values));\n    setIsSubmitted(true);\n  };\n\n  useEffect(() => {\n    if (isSubmitted && Object.keys(errors).length === 0) {\n      if (FormType === \"Login\") {\n        axios.post('user/login', values).then(res => {\n          if (res.data.message === 'Authentication successful!') {\n            localStorage.setItem('token', res.data.token);\n            localStorage.setItem('user', JSON.parse(res.data.user));\n            axios.defaults.headers.common['Authorization'] = res.data.token;\n            setUser(res.data.user);\n            setShowForm(false);\n          }\n        }).catch(err => {\n          if (err.message === \"Request failed with status code 401\") {\n            setErrors(validator(FormType, 'Wrong email or password!'));\n          } else {\n            setDialogState({\n              title: \"Error!\",\n              message: err.message,\n              show: true\n            });\n          }\n        });\n      }\n\n      if (FormType === \"SignUp\") {\n        axios.post('user/sign-up', values).then(res => {\n          setDialogState({\n            title: \"Notify!\",\n            message: res.data.message,\n            show: true\n          });\n          setShowForm(false);\n        }).catch(err => {\n          setDialogState({\n            title: \"Error!\",\n            message: err.message,\n            show: true\n          });\n        });\n      }\n\n      if (FormType === \"ForgotPassword\") {\n        axios.post('user/forgot-password', values).then(res => {\n          setDialogState({\n            title: \"Notify!\",\n            message: \"Your password have been reset successfully! Please check your email for new password! (Make sure to check spam too)\",\n            show: true\n          });\n          setShowForm(false);\n        }).catch(err => {\n          setDialogState({\n            title: \"Error!\",\n            message: err.message,\n            show: true\n          });\n        });\n      }\n\n      if (FormType === \"ChangePassword\") {\n        const config = {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        };\n        axios.post(\"user/change-password/\" + user.id, values, config).then(res => {\n          setDialogState({\n            title: \"Notify!\",\n            message: \"Your password have been changed successfully! Now you can login again with new password!\",\n            show: true\n          });\n          setShowForm(false);\n        }).catch(err => {\n          setDialogState({\n            title: \"Error!\",\n            message: err.message,\n            show: true\n          });\n        });\n      }\n\n      setValues(default_values);\n      setIsSubmitted(false);\n    }\n  }, [errors, FormType, default_values, isSubmitted, setDialogState, setShowForm, setUser, validator, values]);\n\n  const handleClose = e => {\n    if (formRef.current === e.target || e.target.className === \"close-btn\") {\n      setIsSubmitted(false);\n      setValues(default_values);\n      setErrors({});\n      setShowForm(false);\n    }\n  };\n\n  return {\n    handleSubmit,\n    handleClose,\n    handleChange,\n    values,\n    errors\n  };\n};\n\n_s(useForm, \"p/jNbEsBK/6ztEMrKhwNvzullHg=\");\n\nexport default useForm;","map":{"version":3,"sources":["E:/CNTT/MyProjects/arcade/front-end/user_website/src/Components/Popup/Form/useForm.jsx"],"names":["useCallback","useEffect","useState","axios","useForm","FormType","formRef","setShowForm","validator","user","setUser","setDialogState","default_values","Email","Password","Full_name","Confirm_password","Gender","Old_password","New_password","values","setValues","handleChange","e","name","value","target","errors","setErrors","isSubmitted","setIsSubmitted","handleSubmit","preventDefault","Object","keys","length","post","then","res","data","message","localStorage","setItem","token","JSON","parse","defaults","headers","common","catch","err","title","show","config","Authorization","getItem","id","handleClose","current","className"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\n\r\nconst useForm = (FormType, formRef, setShowForm, validator, user, setUser, setDialogState) => {\r\n    const default_values = useCallback(() => {\r\n        if (FormType === \"Login\"){\r\n            return {\r\n                Email: \"\",\r\n                Password: \"\"\r\n            }\r\n        }\r\n        if (FormType === \"SignUp\"){\r\n            return {\r\n                Full_name: \"\",\r\n                Email: \"\",\r\n                Password: \"\",\r\n                Confirm_password: \"\",\r\n                Gender: 1\r\n            }\r\n        }\r\n\r\n        if (FormType === \"ForgotPassword\"){\r\n            return {\r\n                Email: \"\"\r\n            }\r\n        }\r\n\r\n        if (FormType === \"ChangePassword\"){\r\n            return {\r\n                Old_password: \"\",\r\n                New_password: \"\",\r\n                Confirm_password: \"\"\r\n            }\r\n        }\r\n    }, [FormType])\r\n\r\n    const [values, setValues] = useState(default_values)\r\n\r\n    const handleChange = e => {\r\n        const { name, value } = e.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const [errors, setErrors] = useState({});\r\n    const [isSubmitted, setIsSubmitted] = useState(false)\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        setErrors({});\r\n        setErrors(validator(FormType, values));\r\n\r\n        setIsSubmitted(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isSubmitted && Object.keys(errors).length === 0){\r\n            if (FormType === \"Login\"){\r\n                axios.post('user/login', values).then(\r\n                    res => {\r\n                        if (res.data.message === 'Authentication successful!'){\r\n                            localStorage.setItem('token', res.data.token)\r\n                            localStorage.setItem('user', JSON.parse(res.data.user))\r\n                            axios.defaults.headers.common['Authorization'] = res.data.token\r\n                            setUser(res.data.user)\r\n                            setShowForm(false)\r\n                        }\r\n                    }\r\n                ).catch(\r\n                    err => {\r\n                        if (err.message === \"Request failed with status code 401\"){\r\n                            setErrors(validator(FormType, 'Wrong email or password!'))\r\n                        }\r\n                        else{\r\n                            setDialogState({\r\n                                title: \"Error!\",\r\n                                message: err.message,\r\n                                show: true\r\n                            })\r\n                        }\r\n                    }\r\n                )  \r\n            }\r\n            if (FormType === \"SignUp\"){\r\n                axios.post('user/sign-up', values).then(\r\n                    res => {\r\n                        setDialogState({\r\n                            title: \"Notify!\",\r\n                            message: res.data.message,\r\n                            show: true\r\n                        });\r\n                        setShowForm(false);\r\n                    }\r\n                ).catch(\r\n                    err => {\r\n                        setDialogState({\r\n                            title: \"Error!\",\r\n                            message: err.message,\r\n                            show: true\r\n                        })\r\n                    }\r\n                )\r\n            }\r\n    \r\n            if (FormType === \"ForgotPassword\"){\r\n                axios.post('user/forgot-password', values).then(\r\n                    res => {\r\n                        setDialogState({\r\n                            title: \"Notify!\",\r\n                            message: \"Your password have been reset successfully! Please check your email for new password! (Make sure to check spam too)\",\r\n                            show: true\r\n                        })\r\n                        setShowForm(false)\r\n                    }\r\n                ).catch(\r\n                    err => {\r\n                        setDialogState({\r\n                            title: \"Error!\",\r\n                            message: err.message,\r\n                            show: true\r\n                        })\r\n                    }\r\n                )\r\n            }\r\n\r\n            if (FormType === \"ChangePassword\"){\r\n                const config = {\r\n                    headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\r\n                };\r\n                \r\n                axios.post(\"user/change-password/\" + user.id, values, config).then(res => {\r\n                    setDialogState({\r\n                        title: \"Notify!\",\r\n                        message: \"Your password have been changed successfully! Now you can login again with new password!\",\r\n                        show: true\r\n                    })\r\n                    setShowForm(false)\r\n                }).catch(\r\n                    err => {\r\n                        \r\n                        setDialogState({\r\n                            title: \"Error!\",\r\n                            message: err.message,\r\n                            show: true\r\n                        })\r\n                    }\r\n                )\r\n            }\r\n\r\n            setValues(default_values);\r\n            setIsSubmitted(false);\r\n        }\r\n    }, [errors, FormType, default_values, isSubmitted, setDialogState, setShowForm, setUser, validator, values])\r\n\r\n    const handleClose = (e) => {\r\n        if (formRef.current === e.target || e.target.className === \"close-btn\"){\r\n            setIsSubmitted(false)\r\n            setValues(default_values)\r\n            setErrors({})\r\n            setShowForm(false)\r\n        }\r\n    }\r\n\r\n    return { handleSubmit, handleClose, handleChange, values , errors }\r\n}\r\n\r\nexport default useForm;"]},"metadata":{},"sourceType":"module"}